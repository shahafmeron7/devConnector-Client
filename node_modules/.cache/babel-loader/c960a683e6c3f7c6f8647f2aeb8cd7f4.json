{"ast":null,"code":"import{createStore,applyMiddleware}from'redux';import{composeWithDevTools}from'redux-devtools-extension';import thunk from'redux-thunk';import rootReducer from'./reducers';import setAuthToken from'./utils/setAuthToken';var initialState={};var middleware=[thunk];var store=createStore(rootReducer,initialState,composeWithDevTools(applyMiddleware.apply(void 0,middleware)));/*\r\n  NOTE: set up a store subscription listener\r\n  to store the users token in localStorage\r\n */ /*\r\n  initialize current state from redux store for subscription comparison\r\n  preventing undefined error\r\n */var currentState=store.getState();store.subscribe(function(){// keep track of the previous and current state to compare changes\nvar previousState=currentState;currentState=store.getState();// if the token changes set the value in localStorage and axios headers\nif(previousState.auth.token!==currentState.auth.token){var token=currentState.auth.token;setAuthToken(token);}});export default store;","map":{"version":3,"names":["createStore","applyMiddleware","composeWithDevTools","thunk","rootReducer","setAuthToken","initialState","middleware","store","currentState","getState","subscribe","previousState","auth","token"],"sources":["/Users/shahafm/Desktop/devConnector/client/src/store.js"],"sourcesContent":["import { createStore, applyMiddleware } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers';\r\nimport setAuthToken from './utils/setAuthToken';\r\n\r\nconst initialState = {};\r\n\r\nconst middleware = [thunk];\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  initialState,\r\n  composeWithDevTools(applyMiddleware(...middleware))\r\n);\r\n\r\n/*\r\n  NOTE: set up a store subscription listener\r\n  to store the users token in localStorage\r\n */\r\n\r\n/*\r\n  initialize current state from redux store for subscription comparison\r\n  preventing undefined error\r\n */\r\nlet currentState = store.getState();\r\n\r\nstore.subscribe(() => {\r\n  // keep track of the previous and current state to compare changes\r\n  let previousState = currentState;\r\n  currentState = store.getState();\r\n  // if the token changes set the value in localStorage and axios headers\r\n  if (previousState.auth.token !== currentState.auth.token) {\r\n    const token = currentState.auth.token;\r\n    setAuthToken(token);\r\n  }\r\n});\r\n\r\nexport default store;\r\n"],"mappings":"AAAA,OAASA,WAAW,CAAEC,eAAe,KAAQ,OAAO,CACpD,OAASC,mBAAmB,KAAQ,0BAA0B,CAC9D,MAAOC,MAAK,KAAM,aAAa,CAC/B,MAAOC,YAAW,KAAM,YAAY,CACpC,MAAOC,aAAY,KAAM,sBAAsB,CAE/C,GAAMC,aAAY,CAAG,CAAC,CAAC,CAEvB,GAAMC,WAAU,CAAG,CAACJ,KAAK,CAAC,CAE1B,GAAMK,MAAK,CAAGR,WAAW,CACvBI,WAAW,CACXE,YAAY,CACZJ,mBAAmB,CAACD,eAAe,cAAIM,UAAU,CAAC,CAAC,CACpD,CAED;AACA;AACA;AACA,GAHA,CAKA;AACA;AACA;AACA,GACA,GAAIE,aAAY,CAAGD,KAAK,CAACE,QAAQ,EAAE,CAEnCF,KAAK,CAACG,SAAS,CAAC,UAAM,CACpB;AACA,GAAIC,cAAa,CAAGH,YAAY,CAChCA,YAAY,CAAGD,KAAK,CAACE,QAAQ,EAAE,CAC/B;AACA,GAAIE,aAAa,CAACC,IAAI,CAACC,KAAK,GAAKL,YAAY,CAACI,IAAI,CAACC,KAAK,CAAE,CACxD,GAAMA,MAAK,CAAGL,YAAY,CAACI,IAAI,CAACC,KAAK,CACrCT,YAAY,CAACS,KAAK,CAAC,CACrB,CACF,CAAC,CAAC,CAEF,cAAeN,MAAK"},"metadata":{},"sourceType":"module"}