{"ast":null,"code":"import axios from 'axios';\nimport { setAlert } from './alert';\nimport { GET_PROFILE, PROFILE_ERROR, UPDATE_PROFILE } from './types';\n//get current users profiles.\n\nexport const getCurrentProfile = () => async dispatch => {\n  try {\n    const res = await axios.get('/api/profile/me');\n    dispatch({\n      type: GET_PROFILE,\n      payload: res.data\n    });\n  } catch (err) {\n    const errors = err.response.data.errors;\n    console.log(errors);\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n};\nexport const createProfile = _ref => {\n  let {\n    company,\n    website,\n    location,\n    status,\n    skills,\n    githubusername,\n    bio,\n    twitter,\n    facebook,\n    linkedin,\n    youtube,\n    instagram\n  } = _ref;\n  return async dispatch => {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const body = JSON.stringify({\n      company,\n      website,\n      location,\n      status,\n      skills,\n      githubusername,\n      bio,\n      twitter,\n      facebook,\n      linkedin,\n      youtube,\n      instagram\n    });\n    try {\n      const res = await axios.post('/api/profile', body, config);\n      dispatch({\n        type: UPDATE_PROFILE,\n        payload: res.data\n      });\n    } catch (err) {\n      dispatch({\n        type: PROFILE_ERROR,\n        payload: {\n          msg: err.response.statusText,\n          status: err.response.status\n        }\n      });\n    }\n  };\n};\n\n// const initialState = {\n//   profile: null,\n//   profiles: [],\n//   repos: [],\n//   loading: true,\n//   error: {}\n// };","map":{"version":3,"names":["axios","setAlert","GET_PROFILE","PROFILE_ERROR","UPDATE_PROFILE","getCurrentProfile","dispatch","res","get","type","payload","data","err","errors","response","console","log","forEach","error","msg","statusText","status","createProfile","company","website","location","skills","githubusername","bio","twitter","facebook","linkedin","youtube","instagram","config","headers","body","JSON","stringify","post"],"sources":["C:/Users/Ido/Desktop/devConnector/client/src/actions/profile.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nimport { setAlert } from './alert';\r\n\r\nimport { GET_PROFILE, PROFILE_ERROR, UPDATE_PROFILE } from './types';\r\n//get current users profiles.\r\n\r\nexport const getCurrentProfile = () => async dispatch => {\r\n  try {\r\n    const res = await axios.get('/api/profile/me');\r\n    dispatch({\r\n      type: GET_PROFILE,\r\n      payload: res.data\r\n    });\r\n  } catch (err) {\r\n    const errors = err.response.data.errors;\r\n    console.log(errors);\r\n    if (errors) {\r\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\r\n    }\r\n    dispatch({\r\n      type: PROFILE_ERROR,\r\n      payload: {\r\n        msg: err.response.statusText,\r\n        status: err.response.status\r\n      }\r\n    });\r\n  }\r\n};\r\n\r\nexport const createProfile =\r\n  ({\r\n    company,\r\n    website,\r\n    location,\r\n    status,\r\n    skills,\r\n    githubusername,\r\n    bio,\r\n    twitter,\r\n    facebook,\r\n    linkedin,\r\n    youtube,\r\n    instagram\r\n  }) =>\r\n  async dispatch => {\r\n    const config = {\r\n      headers: { 'Content-Type': 'application/json' }\r\n    };\r\n    const body = JSON.stringify({\r\n      company,\r\n      website,\r\n      location,\r\n      status,\r\n      skills,\r\n      githubusername,\r\n      bio,\r\n      twitter,\r\n      facebook,\r\n      linkedin,\r\n      youtube,\r\n      instagram\r\n    });\r\n\r\n    try {\r\n      const res = await axios.post('/api/profile', body, config);\r\n      dispatch({\r\n        type: UPDATE_PROFILE,\r\n        payload: res.data\r\n      });\r\n    } catch (err) {\r\n      dispatch({\r\n        type: PROFILE_ERROR,\r\n        payload: {\r\n          msg: err.response.statusText,\r\n          status: err.response.status\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n// const initialState = {\r\n//   profile: null,\r\n//   profiles: [],\r\n//   repos: [],\r\n//   loading: true,\r\n//   error: {}\r\n// };\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,SAASC,QAAQ,QAAQ,SAAS;AAElC,SAASC,WAAW,EAAEC,aAAa,EAAEC,cAAc,QAAQ,SAAS;AACpE;;AAEA,OAAO,MAAMC,iBAAiB,GAAG,MAAM,MAAMC,QAAQ,IAAI;EACvD,IAAI;IACF,MAAMC,GAAG,GAAG,MAAMP,KAAK,CAACQ,GAAG,CAAC,iBAAiB,CAAC;IAC9CF,QAAQ,CAAC;MACPG,IAAI,EAAEP,WAAW;MACjBQ,OAAO,EAAEH,GAAG,CAACI;IACf,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOC,GAAG,EAAE;IACZ,MAAMC,MAAM,GAAGD,GAAG,CAACE,QAAQ,CAACH,IAAI,CAACE,MAAM;IACvCE,OAAO,CAACC,GAAG,CAACH,MAAM,CAAC;IACnB,IAAIA,MAAM,EAAE;MACVA,MAAM,CAACI,OAAO,CAACC,KAAK,IAAIZ,QAAQ,CAACL,QAAQ,CAACiB,KAAK,CAACC,GAAG,EAAE,QAAQ,CAAC,CAAC,CAAC;IAClE;IACAb,QAAQ,CAAC;MACPG,IAAI,EAAEN,aAAa;MACnBO,OAAO,EAAE;QACPS,GAAG,EAAEP,GAAG,CAACE,QAAQ,CAACM,UAAU;QAC5BC,MAAM,EAAET,GAAG,CAACE,QAAQ,CAACO;MACvB;IACF,CAAC,CAAC;EACJ;AACF,CAAC;AAED,OAAO,MAAMC,aAAa,GACxB;EAAA,IAAC;IACCC,OAAO;IACPC,OAAO;IACPC,QAAQ;IACRJ,MAAM;IACNK,MAAM;IACNC,cAAc;IACdC,GAAG;IACHC,OAAO;IACPC,QAAQ;IACRC,QAAQ;IACRC,OAAO;IACPC;EACF,CAAC;EAAA,OACD,MAAM3B,QAAQ,IAAI;IAChB,MAAM4B,MAAM,GAAG;MACbC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB;IAChD,CAAC;IACD,MAAMC,IAAI,GAAGC,IAAI,CAACC,SAAS,CAAC;MAC1Bf,OAAO;MACPC,OAAO;MACPC,QAAQ;MACRJ,MAAM;MACNK,MAAM;MACNC,cAAc;MACdC,GAAG;MACHC,OAAO;MACPC,QAAQ;MACRC,QAAQ;MACRC,OAAO;MACPC;IACF,CAAC,CAAC;IAEF,IAAI;MACF,MAAM1B,GAAG,GAAG,MAAMP,KAAK,CAACuC,IAAI,CAAC,cAAc,EAAEH,IAAI,EAAEF,MAAM,CAAC;MAC1D5B,QAAQ,CAAC;QACPG,IAAI,EAAEL,cAAc;QACpBM,OAAO,EAAEH,GAAG,CAACI;MACf,CAAC,CAAC;IACJ,CAAC,CAAC,OAAOC,GAAG,EAAE;MACZN,QAAQ,CAAC;QACPG,IAAI,EAAEN,aAAa;QACnBO,OAAO,EAAE;UACPS,GAAG,EAAEP,GAAG,CAACE,QAAQ,CAACM,UAAU;UAC5BC,MAAM,EAAET,GAAG,CAACE,QAAQ,CAACO;QACvB;MACF,CAAC,CAAC;IACJ;EACF,CAAC;AAAA;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}