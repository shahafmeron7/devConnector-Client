{"ast":null,"code":"import axios from 'axios';\nimport { setAlert } from './alert';\nimport { GET_PROFILE, PROFILE_ERROR, UPDATE_PROFILE } from './types';\n//get current users profiles.\n\nexport const getCurrentProfile = () => async dispatch => {\n  try {\n    const res = await axios.get('/api/profile/me');\n    dispatch({\n      type: GET_PROFILE,\n      payload: res.data\n    });\n  } catch (err) {\n    const errors = err.response.data.errors;\n    console.log(errors);\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n};\n//create or update a profile\nexport const createProfile = _ref => {\n  let {\n    formData,\n    navigate,\n    edit = false\n  } = _ref;\n  return async dispatch => {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    // const body = JSON.stringify({\n    //   formData\n    // });\n\n    try {\n      const res = await axios.post('/api/profile', formData, config);\n      dispatch({\n        type: GET_PROFILE,\n        payload: res.data\n      });\n      dispatch(setAlert(edit ? 'Profile Updated' : 'Profile Created'));\n      if (!edit) {\n        navigate('/dashboard');\n      }\n    } catch (err) {\n      const errors = err.response.data.errors;\n      if (errors) {\n        errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n      }\n      dispatch({\n        type: PROFILE_ERROR,\n        payload: {\n          msg: err.response.statusText,\n          status: err.response.status\n        }\n      });\n    }\n  };\n};\n\n// const initialState = {\n//   profile: null,\n//   profiles: [],\n//   repos: [],\n//   loading: true,\n//   error: {}\n// };","map":{"version":3,"names":["axios","setAlert","GET_PROFILE","PROFILE_ERROR","UPDATE_PROFILE","getCurrentProfile","dispatch","res","get","type","payload","data","err","errors","response","console","log","forEach","error","msg","statusText","status","createProfile","formData","navigate","edit","config","headers","post"],"sources":["C:/Users/Ido/Desktop/devConnector/client/src/actions/profile.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nimport { setAlert } from './alert';\r\n\r\nimport { GET_PROFILE, PROFILE_ERROR, UPDATE_PROFILE } from './types';\r\n//get current users profiles.\r\n\r\nexport const getCurrentProfile = () => async dispatch => {\r\n  try {\r\n    const res = await axios.get('/api/profile/me');\r\n    dispatch({\r\n      type: GET_PROFILE,\r\n      payload: res.data\r\n    });\r\n  } catch (err) {\r\n    const errors = err.response.data.errors;\r\n    console.log(errors);\r\n    if (errors) {\r\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\r\n    }\r\n    dispatch({\r\n      type: PROFILE_ERROR,\r\n      payload: {\r\n        msg: err.response.statusText,\r\n        status: err.response.status\r\n      }\r\n    });\r\n  }\r\n};\r\n//create or update a profile\r\nexport const createProfile =\r\n  ({ formData, navigate, edit = false }) =>\r\n  async dispatch => {\r\n    const config = {\r\n      headers: { 'Content-Type': 'application/json' }\r\n    };\r\n    // const body = JSON.stringify({\r\n    //   formData\r\n    // });\r\n\r\n    try {\r\n      const res = await axios.post('/api/profile', formData, config);\r\n      dispatch({\r\n        type: GET_PROFILE,\r\n        payload: res.data\r\n      });\r\n      dispatch(setAlert(edit ? 'Profile Updated' : 'Profile Created'));\r\n      if (!edit) {\r\n        navigate('/dashboard');\r\n      }\r\n    } catch (err) {\r\n      const errors = err.response.data.errors;\r\n      if (errors) {\r\n        errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\r\n      }\r\n      dispatch({\r\n        type: PROFILE_ERROR,\r\n        payload: {\r\n          msg: err.response.statusText,\r\n          status: err.response.status\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n// const initialState = {\r\n//   profile: null,\r\n//   profiles: [],\r\n//   repos: [],\r\n//   loading: true,\r\n//   error: {}\r\n// };\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,SAASC,QAAQ,QAAQ,SAAS;AAElC,SAASC,WAAW,EAAEC,aAAa,EAAEC,cAAc,QAAQ,SAAS;AACpE;;AAEA,OAAO,MAAMC,iBAAiB,GAAG,MAAM,MAAMC,QAAQ,IAAI;EACvD,IAAI;IACF,MAAMC,GAAG,GAAG,MAAMP,KAAK,CAACQ,GAAG,CAAC,iBAAiB,CAAC;IAC9CF,QAAQ,CAAC;MACPG,IAAI,EAAEP,WAAW;MACjBQ,OAAO,EAAEH,GAAG,CAACI;IACf,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOC,GAAG,EAAE;IACZ,MAAMC,MAAM,GAAGD,GAAG,CAACE,QAAQ,CAACH,IAAI,CAACE,MAAM;IACvCE,OAAO,CAACC,GAAG,CAACH,MAAM,CAAC;IACnB,IAAIA,MAAM,EAAE;MACVA,MAAM,CAACI,OAAO,CAACC,KAAK,IAAIZ,QAAQ,CAACL,QAAQ,CAACiB,KAAK,CAACC,GAAG,EAAE,QAAQ,CAAC,CAAC,CAAC;IAClE;IACAb,QAAQ,CAAC;MACPG,IAAI,EAAEN,aAAa;MACnBO,OAAO,EAAE;QACPS,GAAG,EAAEP,GAAG,CAACE,QAAQ,CAACM,UAAU;QAC5BC,MAAM,EAAET,GAAG,CAACE,QAAQ,CAACO;MACvB;IACF,CAAC,CAAC;EACJ;AACF,CAAC;AACD;AACA,OAAO,MAAMC,aAAa,GACxB;EAAA,IAAC;IAAEC,QAAQ;IAAEC,QAAQ;IAAEC,IAAI,GAAG;EAAM,CAAC;EAAA,OACrC,MAAMnB,QAAQ,IAAI;IAChB,MAAMoB,MAAM,GAAG;MACbC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB;IAChD,CAAC;IACD;IACA;IACA;;IAEA,IAAI;MACF,MAAMpB,GAAG,GAAG,MAAMP,KAAK,CAAC4B,IAAI,CAAC,cAAc,EAAEL,QAAQ,EAAEG,MAAM,CAAC;MAC9DpB,QAAQ,CAAC;QACPG,IAAI,EAAEP,WAAW;QACjBQ,OAAO,EAAEH,GAAG,CAACI;MACf,CAAC,CAAC;MACFL,QAAQ,CAACL,QAAQ,CAACwB,IAAI,GAAG,iBAAiB,GAAG,iBAAiB,CAAC,CAAC;MAChE,IAAI,CAACA,IAAI,EAAE;QACTD,QAAQ,CAAC,YAAY,CAAC;MACxB;IACF,CAAC,CAAC,OAAOZ,GAAG,EAAE;MACZ,MAAMC,MAAM,GAAGD,GAAG,CAACE,QAAQ,CAACH,IAAI,CAACE,MAAM;MACvC,IAAIA,MAAM,EAAE;QACVA,MAAM,CAACI,OAAO,CAACC,KAAK,IAAIZ,QAAQ,CAACL,QAAQ,CAACiB,KAAK,CAACC,GAAG,EAAE,QAAQ,CAAC,CAAC,CAAC;MAClE;MACAb,QAAQ,CAAC;QACPG,IAAI,EAAEN,aAAa;QACnBO,OAAO,EAAE;UACPS,GAAG,EAAEP,GAAG,CAACE,QAAQ,CAACM,UAAU;UAC5BC,MAAM,EAAET,GAAG,CAACE,QAAQ,CAACO;QACvB;MACF,CAAC,CAAC;IACJ;EACF,CAAC;AAAA;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}